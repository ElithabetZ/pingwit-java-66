package database.lesson_3.homeWork.task_From_2_To_4;

import java.sql.*;
import java.util.List;
/*
    —Ç—ã –º–æ–ª–æ–¥—á–∏–Ω–∫–∞, —á—Ç–æ —Ä–∞–∑–¥–µ–ª–∏–ª–∞ querymanager –∏ connector.
    –ù–æ —Ç–µ–ø–µ—Ä—å —Å–º–æ—Ç—Ä–∏: –µ—Å–ª–∏ —É —Ç–µ–±—è –ø–æ—è–≤–∏—Ç—Å—è –Ω–æ–≤–∞—è —Å—É—â–Ω–æ—Å—Ç—å, —Ç–æ —ç—Ç–æ –≤—Å–µ –±—É–¥–µ—Ç –≤ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–µ - –Ω–∞–ø—Ä–∏–º–µ—Ä, findEmployees –∏ —Ç.–¥ –∏ —Ç.–ø. –ê —Ç–∞–∫–∏—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π
    –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç—Ä–∏–ª–ª–∏–æ–Ω, –æ–±—Ä–∞–∑–Ω–æ)) –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—à—å, —á—Ç–æ –±—É–¥–µ—Ç —Å —ç—Ç–∏–º –∫–ª–∞—Å—Å–æ–º?...
    –ü–æ—ç—Ç–æ–º—É –¥–∞–≤–∞–π –ø—Ä–µ–º–µ–Ω–∏–º –≤—Å–µ –∑–Ω–∞–Ω–∏—è –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º–∞. –ú–æ–∂–Ω–æ –ø–æ–¥ –∫–∞–∂–¥—É—é —Å—É—â–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.
    interface Repository<T> {
        List<T> find(String query);
    }

    interface StudentRepository<Student> extends Repository {
        ...
    }

    class StudentRepositoryImpl implements StudentRepository {
        @Override
        ...
    }

    –ò –∑–∞—Ç–µ–º –º–æ–∂–Ω–æ –≤ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–µ –¥–æ–±–∞–≤–∏—Ç—å Repository. –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –∏ —Å QueryManager :)

    –ò–º–µ–Ω–Ω–æ —Ç–∞–∫–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å–µ–π—á–∞—Å –ø–æ–∑–≤–æ–ª–∏—Ç —Ç–µ–±–µ —Å –ª–µ–≥–∫–æ—Å—Ç—å—é —Ä–∞—Å—à–∏—Ä—è—Ç—å —Å–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–∏—Å–∞—Ç—å –∫—Ä—É—Ç–æ–π –∫–æ–¥ –≤ –±—É–¥—É—â–µ–º üòé
*/
    
public class Connector {

    private static final String URL = "jdbc:postgresql://localhost:5432/students";
    private static String USERNAME = "postgres";
    private static String PASSWORD = "root";

    public void createTable(String query, String name) {
        try {
            Class.forName("org.postgresql.Driver");
            Connection connection = DriverManager.getConnection(URL, USERNAME, PASSWORD);
            Statement createTable = connection.createStatement();
            createTable.executeUpdate(query);
            System.out.println("Table " + name + " is added");
            connection.close();
        } catch (ClassNotFoundException | SQLException e) {
            throw new RuntimeException(e);
        }
    }

    public void insert(String query) {
        try {
            Class.forName("org.postgresql.Driver");
            Connection connection = DriverManager.getConnection(URL, USERNAME, PASSWORD);
            Statement createTable = connection.createStatement();
            int count = createTable.executeUpdate(query);
            System.out.println("Changed " + count + " times");
            connection.close();
        } catch (ClassNotFoundException | SQLException e) {
            throw new RuntimeException(e);
        }
    }

    //—Ç—ã –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—à—å –ø–æ–∏—Å–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—à—å –∏—Ö. –ó–∞—á–µ–º –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö List? –°–æ–∑–¥–∞–≤–∞–π –≤ –º–µ—Ç–æ–¥–µ –Ω–æ–≤—ã–π
    public List<Student> findStudents(String query, List<Student> students){
        try {
            Class.forName("org.postgresql.Driver");
            Connection connection = DriverManager.getConnection(URL, USERNAME, PASSWORD);
            Statement find = connection.createStatement();
            ResultSet result = find.executeQuery(query);

            while(result.next()){
                long id = result.getLong(1);
                String name = result.getString(2);
                int age = result.getInt(3);
                String course = result.getString(4);
                Student student = new Student(id, name, age, course);
                students.add(student);
            }
            connection.close();

            return students;
        } catch (ClassNotFoundException | SQLException e) {
            throw new RuntimeException(e);//–∞ –¥–∞–≤–∞–π —Ç–∞–∫ –Ω–µ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å? –Ø –Ω–∞ –∑–∞–Ω—è—Ç–∏–∏ —Ç–∞–∫ –ø–∏—à—É –¥–ª—è –±—ã—Å—Ç—Ä–æ—Ç—ã, –Ω–æ –∏ –≥–æ–≤–æ—Ä—é, —á—Ç–æ —Ç–∞–∫ –¥–µ–ª–∞—Ç—å –æ—á–µ–Ω—å –ø–ª–æ—Ö–æ
            //–∫–∞–∫–∏–µ –µ—Å—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã? 
        }
    }
}
